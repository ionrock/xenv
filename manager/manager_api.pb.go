// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manager_api.proto

/*
Package manager is a generated protocol buffer package.

It is generated from these files:
	manager_api.proto

It has these top-level messages:
	SvcProcess
	SvcResult
*/
package manager

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SvcProcess struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *SvcProcess) Reset()                    { *m = SvcProcess{} }
func (m *SvcProcess) String() string            { return proto.CompactTextString(m) }
func (*SvcProcess) ProtoMessage()               {}
func (*SvcProcess) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SvcProcess) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SvcResult struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *SvcResult) Reset()                    { *m = SvcResult{} }
func (m *SvcResult) String() string            { return proto.CompactTextString(m) }
func (*SvcResult) ProtoMessage()               {}
func (*SvcResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SvcResult) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

func init() {
	proto.RegisterType((*SvcProcess)(nil), "manager.SvcProcess")
	proto.RegisterType((*SvcResult)(nil), "manager.SvcResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SvcsManager service

type SvcsManagerClient interface {
	Start(ctx context.Context, in *SvcProcess, opts ...grpc.CallOption) (*SvcResult, error)
	Stop(ctx context.Context, in *SvcProcess, opts ...grpc.CallOption) (*SvcResult, error)
	Restart(ctx context.Context, in *SvcProcess, opts ...grpc.CallOption) (*SvcResult, error)
}

type svcsManagerClient struct {
	cc *grpc.ClientConn
}

func NewSvcsManagerClient(cc *grpc.ClientConn) SvcsManagerClient {
	return &svcsManagerClient{cc}
}

func (c *svcsManagerClient) Start(ctx context.Context, in *SvcProcess, opts ...grpc.CallOption) (*SvcResult, error) {
	out := new(SvcResult)
	err := grpc.Invoke(ctx, "/manager.SvcsManager/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcsManagerClient) Stop(ctx context.Context, in *SvcProcess, opts ...grpc.CallOption) (*SvcResult, error) {
	out := new(SvcResult)
	err := grpc.Invoke(ctx, "/manager.SvcsManager/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcsManagerClient) Restart(ctx context.Context, in *SvcProcess, opts ...grpc.CallOption) (*SvcResult, error) {
	out := new(SvcResult)
	err := grpc.Invoke(ctx, "/manager.SvcsManager/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SvcsManager service

type SvcsManagerServer interface {
	Start(context.Context, *SvcProcess) (*SvcResult, error)
	Stop(context.Context, *SvcProcess) (*SvcResult, error)
	Restart(context.Context, *SvcProcess) (*SvcResult, error)
}

func RegisterSvcsManagerServer(s *grpc.Server, srv SvcsManagerServer) {
	s.RegisterService(&_SvcsManager_serviceDesc, srv)
}

func _SvcsManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcsManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.SvcsManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcsManagerServer).Start(ctx, req.(*SvcProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcsManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcsManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.SvcsManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcsManagerServer).Stop(ctx, req.(*SvcProcess))
	}
	return interceptor(ctx, in, info, handler)
}

func _SvcsManager_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SvcProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SvcsManagerServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manager.SvcsManager/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SvcsManagerServer).Restart(ctx, req.(*SvcProcess))
	}
	return interceptor(ctx, in, info, handler)
}

var _SvcsManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manager.SvcsManager",
	HandlerType: (*SvcsManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _SvcsManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SvcsManager_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _SvcsManager_Restart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manager_api.proto",
}

func init() { proto.RegisterFile("manager_api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcc, 0x4d, 0xcc, 0x4b,
	0x4c, 0x4f, 0x2d, 0x8a, 0x4f, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87,
	0x0a, 0x29, 0x29, 0x70, 0x71, 0x05, 0x97, 0x25, 0x07, 0x14, 0xe5, 0x27, 0xa7, 0x16, 0x17, 0x0b,
	0x09, 0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0xd9,
	0x4a, 0xca, 0x5c, 0x9c, 0xc1, 0x65, 0xc9, 0x41, 0xa9, 0xc5, 0xa5, 0x39, 0x25, 0x42, 0x62, 0x5c,
	0x6c, 0xf9, 0xa5, 0x25, 0x05, 0xa5, 0x25, 0x50, 0x25, 0x50, 0x9e, 0xd1, 0x2a, 0x46, 0x2e, 0xee,
	0xe0, 0xb2, 0xe4, 0x62, 0x5f, 0x88, 0xb1, 0x42, 0x46, 0x5c, 0xac, 0xc1, 0x25, 0x89, 0x45, 0x25,
	0x42, 0xc2, 0x7a, 0x50, 0x9b, 0xf4, 0x10, 0xd6, 0x48, 0x09, 0x21, 0x0b, 0x42, 0x4c, 0x56, 0x62,
	0x10, 0x32, 0xe4, 0x62, 0x09, 0x2e, 0xc9, 0x2f, 0x20, 0x45, 0x8b, 0x09, 0x17, 0x7b, 0x50, 0x6a,
	0x31, 0x89, 0x16, 0x25, 0xb1, 0x81, 0xc3, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x32, 0xaa,
	0x6d, 0xa5, 0x18, 0x01, 0x00, 0x00,
}
